@model LetsEncrypt.SiteExtension.Models.IAuthSettings

@{
    ViewBag.Title = "Authentication Settings";
}

<h2>Authentication Settings</h2>

<p>
    To automate the installation of Let's Encrypt SSL certificate on your Azure Web App, a few things need to be configured. The certificate is installed and renewed using the Azure Resource Manager API, because the renewal process should run unattended you need to register an Azure AD service principal that have access to at least the Azure Web App. Read more about how to register a service principal <a href="http://blogs.msdn.com/b/visualstudioalm/archive/2015/10/04/automating-azure-resource-group-deployment-using-a-service-principal-in-visual-studio-online-build-release-management.aspx">here</a>.
</p>
<p>
    Once you have registered a service principal, you should add the following App Setting, since the site extension reads them from there.
</p>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Key</th><th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.tenantKey</td><td>The tenant name e.g. myazuretenant.onmicrosoft.com</td>                     
        </tr>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.subscriptionIdKey</td>
            <td>(Optional) The subscription id, if left empty the enviroment variable WEBSITE_OWNER_NAME will be used</td>            
        </tr>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.clientIdKey</td>
            <td>The value of the clientid of the service principal</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.clientSecretKey</td>
            <td>The secret for the service principal</td>            
        </tr>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.resourceGroupNameKey</td>
            <td>(Optional) The name of the resource group this web app belongs to, if left empty the enviroment variable WEBSITE_OWNER_NAME will be used</td>
        </tr>        
    </tbody>
</table>
<p>
    Once the app settings are in place you should see them below. And you will be able to proceed.
</p>
<p>
    If you configure your enviroment with ARM templates in a fully automated way you can use <a href="https://github.com/sjkp/letsencrypt-siteextension/blob/master/LetsEncrypt.ResourceGroup/Templates/azuredeploy.json">this</a> ARM template and add a few extra app settings. 
    With these settings, the site extension will be able to configure the hostname and setup SSL automatically. 
</p>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Key</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.acmeBaseUriKey</td>
            <td>The url to Let's Encrypt servers e.g. https://acme-v01.api.letsencrypt.org/ or https://acme-staging.api.letsencrypt.org/ </td>
        </tr>
        <tr>
            <td>@LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.emailKey</td>
            <td>The Email used for registering with Let's Encrypt</td>
        </tr>
        <tr>
            <td>
                @LetsEncrypt.SiteExtension.Models.AppSettingsAuthConfig.hostNamesKey
            </td>
            <td>Comma separated list of custom hostnames (externally hosted setup with CNames), that should automatically be configured for the site.</td>
        </tr>
    </tbody>
</table>
@using (Html.BeginForm())
{
    @*@Html.AntiForgeryToken()*@

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @{
            var authModel = (Model as LetsEncrypt.SiteExtension.Models.AuthenticationModel);
        }
        @if (authModel != null && authModel.Error)
        {
            <div class="alert alert-danger" role="alert">
                @authModel.ErrorMessage
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.Tenant, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tenant, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tenant, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SubscriptionId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SubscriptionId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SubscriptionId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientSecret, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientSecret, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientSecret, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResourceGroupName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResourceGroupName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResourceGroupName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WebAppName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WebAppName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WebAppName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-horizontal">
        <input type="submit" value="Next" class="btn btn-primary pull-right" />
        <br />
        <br />
    </div>
            }

<div>
</div>
